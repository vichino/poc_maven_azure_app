name: Build and Push to ACR

on:
  push:
    branches: [ main ]
  workflow_dispatch:
#test
# Requisitos antes de ejecutar:
# - Configura OIDC en Azure AD para este repo (App Registration + Federated Credentials)
# - Crea los siguientes secrets en GitHub (repo > Settings > Secrets and variables > Actions):
#   AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_SUBSCRIPTION_ID
# - Crea SECRETS de repo (Settings > Secrets and variables > Actions > Secrets):
#   ACR_NAME (solo nombre, p.ej. miacr), ACR_LOGIN_SERVER (p.ej. miacr.azurecr.io), ACR_REPOSITORY (p.ej. poc-maven-azure-app)

env:
  ACR_NAME: ${{ secrets.ACR_NAME }}
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
  ACR_REPOSITORY: ${{ secrets.ACR_REPOSITORY }}
  IMAGE_TAG_SHA: ${{ github.sha }}
  IMAGE_TAG_LATEST: latest
  SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      id-token: write   # requerido para OIDC
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

    #### --- OPA/Conftest: exige USER no root en Dockerfile ---
      - name: Install Conftest
        run: |
          wget -q https://github.com/open-policy-agent/conftest/releases/download/v0.49.0/conftest_0.49.0_Linux_x86_64.tar.gz
          tar xzf conftest_0.49.0_Linux_x86_64.tar.gz
          sudo mv conftest /usr/local/bin

      - name: Enforce non-root user in Dockerfile
        run: conftest test Dockerfile --policy policy/ --parser dockerfile

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          # Si el SP no tiene Reader a nivel de suscripción, descomenta:
          # allow-no-subscriptions: true

      - name: Normalize ACR name and verify
        shell: bash
        run: |
          set -euo pipefail
          echo "Inputs -> ACR_NAME='$ACR_NAME' ACR_LOGIN_SERVER='$ACR_LOGIN_SERVER'" | sed 's/\r//'

          # Normaliza el nombre del ACR (sin protocolo ni dominio)
          to_name_only() {
            local s="$1"
            # a minúsculas, sin protocolo, sin ruta, sin dominio
            s="${s,,}"
            s="${s#http://}"
            s="${s#https://}"
            s="${s%%/*}"
            s="${s%%.*}"
            echo "$s"
          }

          ACR_NAME_TRIM=$(to_name_only "$ACR_NAME")
          ACR_LOGIN_FROM_SERVER=$(to_name_only "$ACR_LOGIN_SERVER")

          if [[ -n "$ACR_NAME_TRIM" && "$ACR_NAME_TRIM" =~ ^[a-z0-9]+$ ]]; then
            ACR_NAME_NORM="$ACR_NAME_TRIM"
          else
            ACR_NAME_NORM="$ACR_LOGIN_FROM_SERVER"
          fi

          # Validación básica
          LEN=${#ACR_NAME_NORM}
          if [[ $LEN -lt 5 || $LEN -gt 50 || ! "$ACR_NAME_NORM" =~ ^[a-z0-9]+$ ]]; then
            echo "ACR_NAME_NORM calculado inválido: '$ACR_NAME_NORM'" >&2
            echo "Asegúrate de definir ACR_NAME (solo nombre) o ACR_LOGIN_SERVER (p.ej. miacr.azurecr.io)" >&2
            exit 1
          fi

          # Fija la suscripción explícitamente y lista ACRs visibles
          az account set --subscription "$SUBSCRIPTION_ID"
          echo "Suscripción activa:" >> $GITHUB_STEP_SUMMARY
          az account show -o table >> $GITHUB_STEP_SUMMARY
          echo "ACRs visibles en la suscripción:" >> $GITHUB_STEP_SUMMARY
          az acr list -o table >> $GITHUB_STEP_SUMMARY || true

          # Si el ACR calculado no existe pero hay uno único en la suscripción, úsalo
          if ! az acr show -n "$ACR_NAME_NORM" -o none 2>/dev/null; then
            ONLY_ONE=$(az acr list --query "length(@) == '1'" -o tsv || echo "false")
            if [[ "$ONLY_ONE" == "true" ]]; then
              ACR_NAME_NORM=$(az acr list --query "[0].name" -o tsv)
              echo "ACR no encontrado, usando el único ACR visible: $ACR_NAME_NORM" >> $GITHUB_STEP_SUMMARY
            else
              echo "El ACR '$ACR_NAME_NORM' no existe en la suscripción seleccionada." >&2
              echo "Revisa los secrets ACR_NAME/ACR_LOGIN_SERVER o SUBSCRIPTION_ID." >&2
              exit 1
            fi
          fi

          echo "ACR_NAME_NORM=$ACR_NAME_NORM" >> "$GITHUB_ENV"
          echo "Using registry: $ACR_NAME_NORM" >> $GITHUB_STEP_SUMMARY
          az acr show -n "$ACR_NAME_NORM" -o table

      - name: Debug Azure identity
        run: |
          az account show --query user

      # CONSTRUCCIÓN LOCAL EN UBUNTU (Reemplaza ACR Tasks)
      - name: Login to ACR
        run: |
          az acr login --name "$ACR_NAME_NORM"

      - name: Build Docker image locally
        run: |
          docker build -t "$ACR_LOGIN_SERVER/$ACR_REPOSITORY:$IMAGE_TAG_SHA" .
          docker tag "$ACR_LOGIN_SERVER/$ACR_REPOSITORY:$IMAGE_TAG_SHA" "$ACR_LOGIN_SERVER/$ACR_REPOSITORY:$IMAGE_TAG_LATEST"

          
      - name: Push Docker image to ACR
        run: |
          docker push "$ACR_LOGIN_SERVER/$ACR_REPOSITORY:$IMAGE_TAG_SHA"
          docker push "$ACR_LOGIN_SERVER/$ACR_REPOSITORY:$IMAGE_TAG_LATEST"

      - name: Summary
        run: |
          echo "Pushed: $ACR_LOGIN_SERVER/$ACR_REPOSITORY:$IMAGE_TAG_SHA" >> $GITHUB_STEP_SUMMARY
          echo "Pushed: $ACR_LOGIN_SERVER/$ACR_REPOSITORY:$IMAGE_TAG_LATEST" >> $GITHUB_STEP_SUMMARY
